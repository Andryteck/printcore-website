'use client';

import { useAppDispatch, useAppSelector } from '@/lib/store';
import { closeCart, removeFromCart, updateQuantity, clearCart } from '@/lib/features/cart/cartSlice';
import { lockScroll, unlockScroll } from '@/lib/utils/scrollLock';
import { useEffect } from 'react';
import Link from 'next/link';
import styles from '@/styles/components/Cart.module.css';

export default function Cart() {
  const dispatch = useAppDispatch();
  const { items, total, isOpen } = useAppSelector((state) => state.cart);

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–µ
  useEffect(() => {
    if (isOpen) {
      lockScroll();
    } else {
      unlockScroll();
    }
    return () => {
      unlockScroll();
    };
  }, [isOpen]);

  const handleQuantityChange = (id: string, newQuantity: number) => {
    if (newQuantity < 1) {
      dispatch(removeFromCart(id));
    } else {
      dispatch(updateQuantity({ id, quantity: newQuantity }));
    }
  };

  if (!isOpen) return null;

  return (
    <>
      {/* –û–≤–µ—Ä–ª–µ–π */}
      <div className={styles.overlay} onClick={() => dispatch(closeCart())} />
      
      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∫–æ—Ä–∑–∏–Ω—ã */}
      <div className={`${styles.cart} ${isOpen ? styles.cartOpen : ''}`}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã */}
        <div className={styles.cartHeader}>
          <h2 className={styles.cartTitle}>
            <span className={styles.cartIcon}>üõí</span>
            –ö–æ—Ä–∑–∏–Ω–∞
            {items.length > 0 && (
              <span className={styles.cartCount}>({items.length})</span>
            )}
          </h2>
          <button
            className={styles.closeButton}
            onClick={() => dispatch(closeCart())}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
          >
            ‚úï
          </button>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã */}
        <div className={styles.cartBody}>
          {items.length === 0 ? (
            <div className={styles.emptyCart}>
              <div className={styles.emptyCartIcon}>üõí</div>
              <p className={styles.emptyCartText}>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
              <p className={styles.emptyCartSubtext}>
                –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
              </p>
              <Link
                href="/services"
                className={styles.continueShoppingButton}
                onClick={() => dispatch(closeCart())}
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫ —É—Å–ª—É–≥–∞–º
              </Link>
            </div>
          ) : (
            <>
              {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
              <div className={styles.cartItems}>
                {items.map((item) => (
                  <div key={item.id} className={styles.cartItem}>
                    <div className={styles.itemContent}>
                      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                      {item.image ? (
                        <div className={styles.itemImage}>
                          <img src={item.image} alt={item.title} />
                        </div>
                      ) : (
                        <div className={styles.itemImagePlaceholder}>
                          üì¶
                        </div>
                      )}

                      <div className={styles.itemInfo}>
                        <h3 className={styles.itemTitle}>{item.title}</h3>
                        {item.options && Object.keys(item.options).length > 0 && (
                          <div className={styles.itemOptions}>
                            {Object.entries(item.options).map(([key, value]) => (
                              <span key={key} className={styles.itemOption}>
                                {key}: {String(value)}
                              </span>
                            ))}
                          </div>
                        )}
                        <div className={styles.itemPrice}>
                          {item.price.toFixed(2)} BYN √ó {item.quantity}
                        </div>
                      </div>
                    </div>

                    <div className={styles.itemActions}>
                      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º */}
                      <div className={styles.quantityControls}>
                        <button
                          className={styles.quantityButton}
                          onClick={() =>
                            handleQuantityChange(item.id, item.quantity - 1)
                          }
                          aria-label="–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                        >
                          ‚àí
                        </button>
                        <input
                          type="number"
                          className={styles.quantityInput}
                          value={item.quantity}
                          onChange={(e) =>
                            handleQuantityChange(
                              item.id,
                              parseInt(e.target.value) || 1
                            )
                          }
                          min="1"
                        />
                        <button
                          className={styles.quantityButton}
                          onClick={() =>
                            handleQuantityChange(item.id, item.quantity + 1)
                          }
                          aria-label="–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                        >
                          +
                        </button>
                      </div>

                      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ —Ç–æ–≤–∞—Ä */}
                      <div className={styles.itemTotal}>
                        {(item.price * item.quantity).toFixed(2)} —Ä—É–±.
                      </div>

                      {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                      <button
                        className={styles.removeButton}
                        onClick={() => dispatch(removeFromCart(item.id))}
                        aria-label="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              {/* –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É */}
              <button
                className={styles.clearCartButton}
                onClick={() => {
                  if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É?')) {
                    dispatch(clearCart());
                  }
                }}
              >
                –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
              </button>
            </>
          )}
        </div>

        {/* –ò—Ç–æ–≥–æ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ */}
        {items.length > 0 && (
          <div className={styles.cartFooter}>
            <div className={styles.totalSection}>
              <span className={styles.totalLabel}>–ò—Ç–æ–≥–æ:</span>
              <span className={styles.totalAmount}>{total.toFixed(2)} BYN</span>
            </div>
            <Link
              href="/cart"
              className={styles.checkoutButton}
              onClick={() => dispatch(closeCart())}
            >
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
            </Link>
            <button
              className={styles.continueButton}
              onClick={() => dispatch(closeCart())}
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
            </button>
          </div>
        )}
      </div>
    </>
  );
}

